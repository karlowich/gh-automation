name: refenv.testing

on:
  push:
    branches: [ refenv.testing ]

defaults:
  run:
    shell: bash

jobs:

  cijoe-lets-go:

    runs-on: self-hosted
    container:
      image: refenv/qemu-nvme:latest
      options: --privileged

    steps:
    - name: Define stuff
      run: |
        echo "ARTIFACTS=/tmp/artifacts" >> $GITHUB_ENV
        echo "RESULTS=/tmp/results" >> $GITHUB_ENV
        echo "TARGET_ENV=/opt/envs/localhost-qemu.sh" >> $GITHUB_ENV
        echo "CLOUD_IMG_URL=https://cloud.debian.org/images/cloud/bullseye/daily/20210425-618/debian-11-generic-amd64-daily-20210425-618.qcow2" >> $GITHUB_ENV

    - name: Create result and artifacts directories
      run: |
        mkdir -p ${ARTIFACTS}
        mkdir -p ${RESULTS}

    - name: Start the SSH server
      run: service ssh restart

    - name: QEMU, provision guest using Debian cloud image
      run: |
        source /opt/scripts/suitup.sh
        qemu::img_from_url "${CLOUD_IMG_URL}"

    - name: QEMU, start the guest
      run: |
        source /opt/scripts/suitup.sh
        qemu::run

    - name: CIJOE, invoke the test-runner targeting the qemu-guest
      run: |
        source /opt/scripts/suitup.sh
        cij_runner \
          --testplan \
          $CIJ_TESTPLANS/example_01_usage.plan \
          --env ${TARGET_ENV} \
          --output ${RESULTS}

    - name: QEMU, kill the guest
      run: |
        source /opt/scripts/suitup.sh
        qemu::kill

    - name: CIJOE, result-log-dump on error
      if: failure()
      run: find ${RESULTS} -name "*.log" | xargs cat

    - name: CIJOE, generate test-report
      if: always()
      run: |
        source /opt/scripts/suitup.sh
        cij_reporter --output "${RESULTS}"

    - name: CIJOE, upload test results and report
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results
        path: ${{ env.RESULTS }}/*

    # The git-hub-actions-runner does not cleanup after itself
    - name: Self-hosted, cleanup
      if: always()
      run: rm -rf *
